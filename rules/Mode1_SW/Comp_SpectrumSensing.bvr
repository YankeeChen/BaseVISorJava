<BaseVISor
      xmlns:concertoa="http://ece.neu.edu/ontologies/ConcertOlogy_ABox.owl#"
      xmlns:concerto="http://ece.neu.edu/ontologies/ConcertOlogy.owl#"
      xmlns:obr="http://ece.neu.edu.crf/OBROntology.owl#"
      xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
      xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
      xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
      xmlns:owl="http://www.w3.org/2002/07/owl#">

      <include lang="BaseVISor" relativePath="Comp_SpectrumSensing_Composition.bvr" />

<rule name="SpectrumSensing rule">
    <body>
        <triple>
            <subject variable="_Ind"/>
            <predicate resource="rdf:type"/>
            <object resource="concerto:SpectrumSensing"/>
        </triple>
    </body>
    <head>

        <bind variable="_Ind.Clk.clk">
                <makeAsset><_Ind/>.Clk.clk</makeAsset>
        </bind>

        <!--bind variable="_Ind.in.in_re">
                <makeAsset><_Ind/>.in.in_re</makeAsset>
        </bind>
        <bind variable="_Ind.in.in_im">
                <makeAsset><_Ind/>.in.in_im</makeAsset>
        </bind-->
        <bind variable="_Ind.in.in_data">
                <makeAsset><_Ind/>.in.in_data</makeAsset>
        </bind>        
        <bind variable="_Ind.in.in_direction">
                <makeAsset><_Ind/>.in.in_direction</makeAsset>
        </bind>
        <bind variable="_Ind.in.in_th">
                <makeAsset><_Ind/>.in.in_th</makeAsset>
        </bind>
        <bind variable="_Ind.in.SS_Signal">
                <makeAsset><_Ind/>.in.SS_Signal</makeAsset>
        </bind>
        <bind variable="_Ind.out.SS_bit_out">
                <makeAsset><_Ind/>.out.SS_bit_out</makeAsset>
        </bind>

        <assert>
            <Individual variable="_Ind" rdf:type="owl:NamedIndividual">
                <obr:hasName datatype="xsd:string">SpectrumSensing</obr:hasName>
                <concerto:latency datatype="xsd:integer">4</concerto:latency>
                <concerto:activationCost datatype="xsd:integer">4</concerto:activationCost>
                <concerto:power datatype="xsd:float">2.0</concerto:power>          
                <obr:hasExtClock variable="_Ind.Clk.clk">
                    <rdf:type resource="obr:ExternalClock"/>
                    <rdf:type resource="owl:NamedIndividual"/>
                    <obr:hasName datatype="xsd:string">clk</obr:hasName>
                </obr:hasExtClock>

                <!--obr:hasInputPort variable="_Ind.in.in_re">
                    <rdf:type resource="concerto:FloatArrayInputPort"/>
                    <rdf:type resource="owl:NamedIndividual"/>
                    <obr:hasName datatype="xsd:string">in_re</obr:hasName>
                </obr:hasInputPort>

                <obr:hasInputPort variable="_Ind.in.in_im">
                    <rdf:type resource="concerto:FloatArrayInputPort"/>
                    <rdf:type resource="owl:NamedIndividual"/>
                    <obr:hasName datatype="xsd:string">in_im</obr:hasName>
                </obr:hasInputPort-->

                <obr:hasInputPort variable="_Ind.in.in_data">
                    <rdf:type resource="concerto:ComplexArrayOfArrayInputPort"/>
                    <rdf:type resource="owl:NamedIndividual"/>
                    <obr:hasName datatype="xsd:string">in_data</obr:hasName>
                </obr:hasInputPort>

                <obr:hasInputPort variable="_Ind.in.in_direction">
                    <rdf:type resource="concerto:IntegerArrayInputPort"/>
                    <rdf:type resource="owl:NamedIndividual"/>
                    <obr:hasName datatype="xsd:string">in_direction</obr:hasName>
                </obr:hasInputPort>

                <obr:hasInputPort variable="_Ind.in.in_th">
                    <rdf:type resource="concerto:ComplexArrayInputPort"/>
                    <rdf:type resource="owl:NamedIndividual"/>
                    <obr:hasName datatype="xsd:string">in_th</obr:hasName>
                </obr:hasInputPort>

                <obr:hasInputPort variable="_Ind.in.SS_Signal">
                    <rdf:type resource="obr:IntegerInputPort"/>
                    <rdf:type resource="owl:NamedIndividual"/>
                    <obr:hasName datatype="xsd:string">SS_signal</obr:hasName>
                </obr:hasInputPort>

                <obr:hasOutputPort variable="_Ind.out.SS_bit_out">
                    <rdf:type resource="concerto:IntegerArrayOutputPort"/>
                    <rdf:type resource="owl:NamedIndividual"/>
                    <obr:hasName datatype="xsd:string">SS_bit_out</obr:hasName>
                </obr:hasOutputPort>
            </Individual>
        </assert>
    </head>
</rule>

</BaseVISor>
